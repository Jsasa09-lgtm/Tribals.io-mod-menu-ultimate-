#!/usr/bin/env python3
"""
üîÑ CONTINUOUS UPDATE SCRIPT
Auto-generated by Simple GitHub Automation
Generated: 2025-10-18T18:41:25.530898
"""

import time
import subprocess
import os
from datetime import datetime

def continuous_update():
    print("üîÑ Starting continuous update process...")
    print("Press Ctrl+C to stop")
    
    cycle = 0
    while True:
        try:
            cycle += 1
            print(f"\nüïê Update cycle {cycle} at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Check repository status
            check_repository_status()
            
            # Update mods
            update_mods()
            
            # Update documentation
            update_documentation()
            
            # Commit changes
            commit_changes()
            
            print("‚úÖ Update cycle completed")
            
            # Wait for next cycle (5 minutes)
            print("‚è≥ Waiting 5 minutes for next cycle...")
            time.sleep(300)
            
        except KeyboardInterrupt:
            print("\nüõë Continuous update stopped by user")
            break
        except Exception as e:
            print(f"‚ùå Update error: {e}")
            print("‚è≥ Waiting 1 minute before retry...")
            time.sleep(60)

def check_repository_status():
    print("üîç Checking repository status...")
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, cwd='/workspace')
        if result.stdout.strip():
            print(f"  üìä Modified files: {len(result.stdout.strip().split('\n'))}")
        else:
            print("  ‚úÖ No changes detected")
    except Exception as e:
        print(f"  ‚ö†Ô∏è Status check failed: {e}")

def update_mods():
    print("üîß Updating mods...")
    # Add version info to mods
    mod_files = []
    for root, dirs, files in os.walk('/workspace'):
        for file in files:
            if file.endswith('.js') and ('mod' in file.lower() or 'tribals' in file.lower()):
                mod_files.append(os.path.join(root, file))
    
    for mod_file in mod_files:
        try:
            with open(mod_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Add update timestamp if not present
            if 'Auto-updated by GitHub Repository Automation' not in content:
                header = f"// ü§ñ Auto-updated by GitHub Repository Automation\n// Updated: {datetime.now().isoformat()}\n\n"
                content = header + content
                
                with open(mod_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                    
        except Exception as e:
            print(f"  ‚ö†Ô∏è Failed to update {os.path.basename(mod_file)}: {e}")
    
    print(f"  ‚úÖ Updated {len(mod_files)} mod files")

def update_documentation():
    print("üìö Updating documentation...")
    # Update README timestamp
    try:
        with open('/workspace/README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Update last updated timestamp
        if 'Last Updated' in content:
            content = content.replace(
                '**Last Updated**: 2024-12-19',
                f'**Last Updated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
            )
            
            with open('/workspace/README.md', 'w', encoding='utf-8') as f:
                f.write(content)
                
        print("  ‚úÖ Documentation updated")
    except Exception as e:
        print(f"  ‚ö†Ô∏è Documentation update failed: {e}")

def commit_changes():
    print("üì¶ Committing changes...")
    try:
        # Add all files
        subprocess.run(['git', 'add', '.'], check=True, cwd='/workspace')
        print("  ‚úÖ Files added to git")
        
        # Commit changes
        commit_message = f"ü§ñ Auto-update: {datetime.now().isoformat()}"
        subprocess.run(['git', 'commit', '-m', commit_message], check=True, cwd='/workspace')
        print("  ‚úÖ Changes committed")
        
        # Push changes (if remote is configured)
        try:
            subprocess.run(['git', 'push'], check=True, cwd='/workspace')
            print("  ‚úÖ Changes pushed to remote")
        except subprocess.CalledProcessError:
            print("  ‚ö†Ô∏è Push failed (no remote configured)")
            
    except subprocess.CalledProcessError as e:
        print(f"  ‚ö†Ô∏è Git operation failed: {e}")

if __name__ == "__main__":
    continuous_update()
